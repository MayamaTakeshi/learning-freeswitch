const config = require('config')
const sip = require ('sip-lab')
const Zeq = require('@mayama/zeq')
const m = require('data-matching')
const sip_msg = require('sip-matching')

// create our Zeq instance
var z = new Zeq()

async function test() {
    // set trap for events generated by sip-lab
    z.trap_events(sip.event_source, 'event', (evt) => {
        var e = evt.args[0]
        return e
    })

    // set list of available codecs (just to make SIP messages to be shorter)
    sip.set_codecs("pcmu/8000/1:128,pcma/8000/1:128,gsm/8000/1:128")

    // set the timeout in milliseconds to notify aggregatedd DTMF digits
    sip.dtmf_aggregation_on(500)

    // start sip-lab
    console.log(sip.start((data) => { console.log(data)} ))

    // create a transport
    const t1 = sip.transport.create({address: config.local_ip})

    let calling_number = '0312341234'
    let called_number = '05011112222'

    // print t1 
    console.log("t1", t1)

    // create a call to freeswitch public interface (port 5080)
    const oc = sip.call.create(t1.id, {
        from_uri: `sip:${calling_number}@test.com`,
        to_uri: `sip:${called_number}@${config.local_ip}:5080`,
    })

    // wait for replies from freeswitch
    await z.wait([
        {
            event: 'response',
            call_id: oc.id,
            method: 'INVITE',
            msg: sip_msg({
                $rs: '100',
                $rr: 'Trying',
            }),
        },
        {
            event: 'response',
            call_id: oc.id,
            method: 'INVITE',
            msg: sip_msg({
                $rs: '200',
                $rr: 'OK',
            }),
        },
        {
            event: 'media_update',
            call_id: oc.id,
            status: 'ok',
        },
    ], 1000)

    // wait a little for the voice path to be established.
    await z.sleep(500)

    // start detection of inband DTMF
    sip.call.start_inband_dtmf_detection(oc.id)

    let digits = '112233'
    let mode = 1 // mode=0 (RFC2833), mode=1 (inband)

    // send digits
    sip.call.send_dtmf(oc.id, {digits, mode})

    // wait for echo of DTMF digits
    await z.wait([
        {
            event: 'dtmf',
            call_id: oc.id,
            digits,
            mode,
            media_id: 0
        },
    ], 3000)

    // terminate the call
    sip.call.terminate(oc.id)

    // wait for termination events
    await z.wait([
        {
            event: 'response',
            call_id: oc.id,
            method: 'BYE',
            msg: sip_msg({
                $rs: '200',
                $rr: 'OK',
            }),
        },
        {
            event: 'call_ended',
            call_id: oc.id,
        },
    ], 1000)

    console.log("Success")

    sip.stop()
    process.exit(0)
}


test()
.catch(e => {
    console.error(e)
    process.exit(1)
})


